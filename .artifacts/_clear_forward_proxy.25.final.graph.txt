 %0 = _x                                        # EncryptedTensor<uint1, shape=(1, 32, 64)>         ∈ [1, 1]
 %1 = subgraph(%0)                              # EncryptedTensor<uint3, shape=(1, 32, 64)>         ∈ [0, 7]
 %2 = [[-1 -1  0 ...  0  0  0]]                 # ClearTensor<int3, shape=(64, 64)>                 ∈ [-3, 3]                 @ /attn/query/MatMul.matmul
 %3 = matmul(%1, %2)                            # EncryptedTensor<int7, shape=(1, 32, 64)>          ∈ [-33, 34]               @ /attn/query/MatMul.matmul
 %4 = subgraph(%0)                              # EncryptedTensor<uint3, shape=(1, 32, 64)>         ∈ [0, 7]
 %5 = [[0 0 0 .. ... .. 0 0 0]]                 # ClearTensor<int3, shape=(64, 64)>                 ∈ [-2, 3]                 @ /attn/key/MatMul.matmul
 %6 = matmul(%4, %5)                            # EncryptedTensor<int6, shape=(1, 32, 64)>          ∈ [-28, 28]               @ /attn/key/MatMul.matmul
 %7 = subgraph(%6)                              # EncryptedTensor<uint5, shape=(1, 32, 64)>         ∈ [0, 31]
 %8 = subgraph(%0)                              # EncryptedTensor<uint3, shape=(1, 32, 64)>         ∈ [0, 7]
 %9 = [[ 0  0  0 ...  0  0  0]]                 # ClearTensor<int3, shape=(64, 64)>                 ∈ [-3, 3]                 @ /attn/value/MatMul.matmul
%10 = matmul(%8, %9)                            # EncryptedTensor<int8, shape=(1, 32, 64)>          ∈ [-79, 83]               @ /attn/value/MatMul.matmul
%11 = transpose(%7, axes=(0, 2, 1))             # EncryptedTensor<uint5, shape=(1, 64, 32)>         ∈ [0, 31]
%12 = subgraph(%3)                              # EncryptedTensor<int3, shape=(1, 32, 64)>          ∈ [-4, 3]
%13 = subgraph(%11)                             # EncryptedTensor<int3, shape=(1, 64, 32)>          ∈ [-4, 3]
%14 = copy_function(%12)                        # EncryptedTensor<int3, shape=(1, 32, 64)>          ∈ [-4, 3]
%15 = copy_function(%13)                        # EncryptedTensor<int3, shape=(1, 64, 32)>          ∈ [-4, 3]
%16 = zeros()                                   # EncryptedTensor<uint1, shape=(1, 32, 32)>         ∈ [0, 0]                  @ /attn/MatMul.matmul.encrypted_matmul
%17 = %14[0]                                    # EncryptedTensor<int3, shape=(32, 64)>             ∈ [-4, 3]                 @ /attn/MatMul.matmul.encrypted_matmul
%18 = %15[0]                                    # EncryptedTensor<int3, shape=(64, 32)>             ∈ [-4, 3]                 @ /attn/MatMul.matmul.encrypted_matmul
%19 = reshape(%17, newshape=(32, 64, 1))        # EncryptedTensor<int3, shape=(32, 64, 1)>          ∈ [-4, 3]                 @ /attn/MatMul.matmul.encrypted_matmul
%20 = reshape(%18, newshape=(1, 64, 32))        # EncryptedTensor<int3, shape=(1, 64, 32)>          ∈ [-4, 3]                 @ /attn/MatMul.matmul.encrypted_matmul
%21 = add(%19, %20)                             # EncryptedTensor<int4, shape=(32, 64, 32)>         ∈ [-6, 4]                 @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
%22 = subtract(%19, %20)                        # EncryptedTensor<int4, shape=(32, 64, 32)>         ∈ [-4, 5]                 @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
%23 = subgraph(%21)                             # EncryptedTensor<uint4, shape=(32, 64, 32)>        ∈ [0, 9]                  @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
%24 = subgraph(%22)                             # EncryptedTensor<uint3, shape=(32, 64, 32)>        ∈ [0, 6]                  @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
%25 = subtract(%23, %24)                        # EncryptedTensor<int5, shape=(32, 64, 32)>         ∈ [-4, 9]                 @ /attn/MatMul.matmul.encrypted_matmul
%26 = sum(%25, axis=1)                          # EncryptedTensor<uint5, shape=(32, 32)>            ∈ [24, 24]                @ /attn/MatMul.matmul.encrypted_matmul
%27 = (%16[0] = %26)                            # EncryptedTensor<uint5, shape=(1, 32, 32)>         ∈ [24, 24]                @ /attn/MatMul.matmul.encrypted_matmul
%28 = copy_function(%12)                        # EncryptedTensor<int3, shape=(1, 32, 64)>          ∈ [-4, 3]
%29 = sum(%28, axis=-1, keepdims=True)          # EncryptedTensor<int4, shape=(1, 32, 1)>           ∈ [-5, -5]                @ /attn/MatMul.matmul_inputsum
%30 = 1                                         # ClearScalar<uint1>                                ∈ [1, 1]                  @ /attn/MatMul.matmul_inputsum
%31 = multiply(%30, %29)                        # EncryptedTensor<int4, shape=(1, 32, 1)>           ∈ [-5, -5]                @ /attn/MatMul.matmul_inputsum
%32 = add(%27, %31)                             # EncryptedTensor<uint5, shape=(1, 32, 32)>         ∈ [19, 19]                @ /attn/MatMul.matmul_add_inputsum
%33 = copy_function(%13)                        # EncryptedTensor<int3, shape=(1, 64, 32)>          ∈ [-4, 3]
%34 = sum(%33, axis=-2, keepdims=True)          # EncryptedTensor<int8, shape=(1, 1, 32)>           ∈ [-69, -69]              @ /attn/MatMul.sum_weights_times_zero_point
%35 = 0                                         # ClearScalar<uint1>                                ∈ [0, 0]                  @ /attn/MatMul.sum_weights_times_zero_point
%36 = multiply(%35, %34)                        # EncryptedTensor<uint1, shape=(1, 1, 32)>          ∈ [0, 0]                  @ /attn/MatMul.sum_weights_times_zero_point
%37 = 0                                         # ClearScalar<uint1>                                ∈ [0, 0]
%38 = add(%32, %37)                             # EncryptedTensor<uint5, shape=(1, 32, 32)>         ∈ [19, 19]
%39 = subtract(%38, %36)                        # EncryptedTensor<uint5, shape=(1, 32, 32)>         ∈ [19, 19]
%40 = subgraph(%39)                             # EncryptedTensor<uint1, shape=(1, 32, 32)>         ∈ [1, 1]
%41 = subgraph(%10)                             # EncryptedTensor<int3, shape=(1, 32, 64)>          ∈ [-4, 3]
%42 = copy_function(%40)                        # EncryptedTensor<uint1, shape=(1, 32, 32)>         ∈ [1, 1]
%43 = copy_function(%41)                        # EncryptedTensor<int3, shape=(1, 32, 64)>          ∈ [-4, 3]
%44 = zeros()                                   # EncryptedTensor<uint1, shape=(1, 32, 64)>         ∈ [0, 0]                  @ /attn/MatMul_1.matmul.encrypted_matmul
%45 = %42[0]                                    # EncryptedTensor<uint1, shape=(32, 32)>            ∈ [1, 1]                  @ /attn/MatMul_1.matmul.encrypted_matmul
%46 = %43[0]                                    # EncryptedTensor<int3, shape=(32, 64)>             ∈ [-4, 3]                 @ /attn/MatMul_1.matmul.encrypted_matmul
%47 = reshape(%45, newshape=(32, 32, 1))        # EncryptedTensor<uint1, shape=(32, 32, 1)>         ∈ [1, 1]                  @ /attn/MatMul_1.matmul.encrypted_matmul
%48 = reshape(%46, newshape=(1, 32, 64))        # EncryptedTensor<int3, shape=(1, 32, 64)>          ∈ [-4, 3]                 @ /attn/MatMul_1.matmul.encrypted_matmul
%49 = add(%47, %48)                             # EncryptedTensor<int4, shape=(32, 32, 64)>         ∈ [-3, 4]                 @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
%50 = subtract(%47, %48)                        # EncryptedTensor<int4, shape=(32, 32, 64)>         ∈ [-2, 5]                 @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
%51 = subgraph(%49)                             # EncryptedTensor<uint3, shape=(32, 32, 64)>        ∈ [0, 4]                  @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
%52 = subgraph(%50)                             # EncryptedTensor<uint3, shape=(32, 32, 64)>        ∈ [0, 6]                  @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
%53 = subtract(%51, %52)                        # EncryptedTensor<int3, shape=(32, 32, 64)>         ∈ [-4, 3]                 @ /attn/MatMul_1.matmul.encrypted_matmul
%54 = sum(%53, axis=1)                          # EncryptedTensor<int8, shape=(32, 64)>             ∈ [-128, 96]              @ /attn/MatMul_1.matmul.encrypted_matmul
%55 = (%44[0] = %54)                            # EncryptedTensor<int8, shape=(1, 32, 64)>          ∈ [-128, 96]              @ /attn/MatMul_1.matmul.encrypted_matmul
%56 = copy_function(%40)                        # EncryptedTensor<uint1, shape=(1, 32, 32)>         ∈ [1, 1]
%57 = sum(%56, axis=-1, keepdims=True)          # EncryptedTensor<uint6, shape=(1, 32, 1)>          ∈ [32, 32]                @ /attn/MatMul_1.matmul_inputsum
%58 = 1                                         # ClearScalar<uint1>                                ∈ [1, 1]                  @ /attn/MatMul_1.matmul_inputsum
%59 = multiply(%58, %57)                        # EncryptedTensor<uint6, shape=(1, 32, 1)>          ∈ [32, 32]                @ /attn/MatMul_1.matmul_inputsum
%60 = add(%55, %59)                             # EncryptedTensor<int9, shape=(1, 32, 64)>          ∈ [-96, 128]              @ /attn/MatMul_1.matmul_add_inputsum
%61 = copy_function(%41)                        # EncryptedTensor<int3, shape=(1, 32, 64)>          ∈ [-4, 3]
%62 = sum(%61, axis=-2, keepdims=True)          # EncryptedTensor<int8, shape=(1, 1, 64)>           ∈ [-128, 96]              @ /attn/MatMul_1.sum_weights_times_zero_point
%63 = 0                                         # ClearScalar<uint1>                                ∈ [0, 0]                  @ /attn/MatMul_1.sum_weights_times_zero_point
%64 = multiply(%63, %62)                        # EncryptedTensor<uint1, shape=(1, 1, 64)>          ∈ [0, 0]                  @ /attn/MatMul_1.sum_weights_times_zero_point
%65 = 0                                         # ClearScalar<uint1>                                ∈ [0, 0]
%66 = add(%60, %65)                             # EncryptedTensor<int9, shape=(1, 32, 64)>          ∈ [-96, 128]
%67 = subtract(%66, %64)                        # EncryptedTensor<int9, shape=(1, 32, 64)>          ∈ [-96, 128]
%68 = subgraph(%67)                             # EncryptedTensor<int3, shape=(1, 32, 64)>          ∈ [-4, 3]
%69 = [[ 0  0  0 ... -1  0  1]]                 # ClearTensor<int3, shape=(64, 64)>                 ∈ [-3, 3]                 @ /attn/out_proj/MatMul.matmul
%70 = matmul(%68, %69)                          # EncryptedTensor<int9, shape=(1, 32, 64)>          ∈ [-115, 161]             @ /attn/out_proj/MatMul.matmul
%71 = subgraph(%0)                              # EncryptedTensor<uint1, shape=(1, 32, 64)>         ∈ [1, 1]
%72 = subgraph(%70)                             # EncryptedTensor<int3, shape=(1, 32, 64)>          ∈ [-4, 3]
%73 = subgraph(%71)                             # EncryptedTensor<uint18, shape=(1, 32, 64)>        ∈ [144708, 144708]
%74 = subgraph(%72)                             # EncryptedTensor<int6, shape=(1, 32, 64)>          ∈ [-13, 18]
%75 = 1                                         # ClearScalar<uint1>                                ∈ [1, 1]
%76 = multiply(%75, %74)                        # EncryptedTensor<int6, shape=(1, 32, 64)>          ∈ [-13, 18]
%77 = add(%73, %76)                             # EncryptedTensor<uint18, shape=(1, 32, 64)>        ∈ [144695, 144726]
%78 = subgraph(%77)                             # EncryptedTensor<uint3, shape=(1, 32, 64)>         ∈ [0, 7]
%79 = [[ 0  0  0 ... -1 -1  0]]                 # ClearTensor<int3, shape=(64, 128)>                ∈ [-2, 3]                 @ /mlp/fc1/MatMul.matmul
%80 = matmul(%78, %79)                          # EncryptedTensor<int7, shape=(1, 32, 128)>         ∈ [-38, 27]               @ /mlp/fc1/MatMul.matmul
%81 = subgraph(%80)                             # EncryptedTensor<int3, shape=(1, 32, 128)>         ∈ [-4, 3]
%82 = [[ 0  0  0 ...  0  0 -1]]                 # ClearTensor<int3, shape=(128, 64)>                ∈ [-2, 3]                 @ /mlp/fc2/MatMul.matmul
%83 = matmul(%81, %82)                          # EncryptedTensor<int7, shape=(1, 32, 64)>          ∈ [-34, 54]               @ /mlp/fc2/MatMul.matmul
%84 = subgraph(%77)                             # EncryptedTensor<int3, shape=(1, 32, 64)>          ∈ [-4, 3]
%85 = subgraph(%83)                             # EncryptedTensor<int3, shape=(1, 32, 64)>          ∈ [-4, 3]
%86 = subgraph(%84)                             # EncryptedTensor<uint15, shape=(1, 32, 64)>        ∈ [32673, 32680]
%87 = subgraph(%85)                             # EncryptedTensor<int18, shape=(1, 32, 64)>         ∈ [-56959, 75946]
%88 = 1                                         # ClearScalar<uint1>                                ∈ [1, 1]
%89 = multiply(%88, %87)                        # EncryptedTensor<int18, shape=(1, 32, 64)>         ∈ [-56959, 75946]
%90 = add(%86, %89)                             # EncryptedTensor<int18, shape=(1, 32, 64)>         ∈ [-24283, 108622]
return %90

Subgraphs:

    %1 = subgraph(%0):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 32, 64)>
         %1 = 0.0                              # ClearScalar<float64>
         %2 = subtract(%0, %1)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %3 = 0.009999999776482582             # ClearScalar<float64>
         %4 = multiply(%3, %2)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %5 = [1.0138545 ... .9418791 ]        # ClearTensor<float32, shape=(64,)>
         %6 = multiply(%4, %5)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %7 = 0.0007430602397237505            # ClearScalar<float64>
         %8 = divide(%6, %7)                   # EncryptedTensor<float64, shape=(1, 32, 64)>
         %9 = -11                              # ClearScalar<int5>
        %10 = add(%8, %9)                      # EncryptedTensor<float64, shape=(1, 32, 64)>
        %11 = rint(%10)                        # EncryptedTensor<float64, shape=(1, 32, 64)>
        %12 = 0                                # ClearScalar<uint1>
        %13 = 7                                # ClearScalar<uint3>
        %14 = clip(%11, %12, %13)              # EncryptedTensor<float64, shape=(1, 32, 64)>
        %15 = astype(%14, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %15

    %4 = subgraph(%0):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 32, 64)>
         %1 = 0.0                              # ClearScalar<float64>
         %2 = subtract(%0, %1)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %3 = 0.009999999776482582             # ClearScalar<float64>
         %4 = multiply(%3, %2)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %5 = [1.0138545 ... .9418791 ]        # ClearTensor<float32, shape=(64,)>
         %6 = multiply(%4, %5)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %7 = 0.0007430602397237505            # ClearScalar<float64>
         %8 = divide(%6, %7)                   # EncryptedTensor<float64, shape=(1, 32, 64)>
         %9 = -11                              # ClearScalar<int5>
        %10 = add(%8, %9)                      # EncryptedTensor<float64, shape=(1, 32, 64)>
        %11 = rint(%10)                        # EncryptedTensor<float64, shape=(1, 32, 64)>
        %12 = 0                                # ClearScalar<uint1>
        %13 = 7                                # ClearScalar<uint3>
        %14 = clip(%11, %12, %13)              # EncryptedTensor<float64, shape=(1, 32, 64)>
        %15 = astype(%14, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %15

    %7 = subgraph(%6):

         %0 = input                            # EncryptedTensor<uint7, shape=(1, 32, 64)>          @ /attn/key/MatMul.matmul
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 32, 64)>        @ /attn/key/MatMul.matmul_rounding
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 32, 64)>
         %4 = [[ 22  22  ...    0  66]]        # ClearTensor<int8, shape=(1, 64)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %6 = 0.00023345456028376447           # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %8 = 0.1                              # ClearScalar<float32>
         %9 = multiply(%7, %8)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
        %10 = 0.00013246862385861817           # ClearScalar<float64>
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 32, 64)>
        %12 = 15                               # ClearScalar<uint4>
        %13 = add(%11, %12)                    # EncryptedTensor<float64, shape=(1, 32, 64)>
        %14 = rint(%13)                        # EncryptedTensor<float64, shape=(1, 32, 64)>
        %15 = 0                                # ClearScalar<uint1>
        %16 = 31                               # ClearScalar<uint5>
        %17 = clip(%14, %15, %16)              # EncryptedTensor<float64, shape=(1, 32, 64)>
        %18 = astype(%17, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %18

    %8 = subgraph(%0):

         %0 = input                            # EncryptedTensor<uint1, shape=(1, 32, 64)>
         %1 = 0.0                              # ClearScalar<float64>
         %2 = subtract(%0, %1)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %3 = 0.009999999776482582             # ClearScalar<float64>
         %4 = multiply(%3, %2)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %5 = [1.0138545 ... .9418791 ]        # ClearTensor<float32, shape=(64,)>
         %6 = multiply(%4, %5)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %7 = 0.0007430602397237505            # ClearScalar<float64>
         %8 = divide(%6, %7)                   # EncryptedTensor<float64, shape=(1, 32, 64)>
         %9 = -11                              # ClearScalar<int5>
        %10 = add(%8, %9)                      # EncryptedTensor<float64, shape=(1, 32, 64)>
        %11 = rint(%10)                        # EncryptedTensor<float64, shape=(1, 32, 64)>
        %12 = 0                                # ClearScalar<uint1>
        %13 = 7                                # ClearScalar<uint3>
        %14 = clip(%11, %12, %13)              # EncryptedTensor<float64, shape=(1, 32, 64)>
        %15 = astype(%14, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %15

    %12 = subgraph(%3):

         %0 = input                            # EncryptedTensor<uint7, shape=(1, 32, 64)>          @ /attn/query/MatMul.matmul
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 32, 64)>        @ /attn/query/MatMul.matmul_rounding
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 32, 64)>
         %4 = [[  77   2 ... -33    0]]        # ClearTensor<int9, shape=(1, 64)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %6 = 0.00026963481380951987           # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %8 = 0.1                              # ClearScalar<float32>
         %9 = multiply(%7, %8)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
        %10 = 0.0010558731265685778            # ClearScalar<float64>
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 32, 64)>
        %12 = 0                                # ClearScalar<uint1>
        %13 = add(%11, %12)                    # EncryptedTensor<float64, shape=(1, 32, 64)>
        %14 = rint(%13)                        # EncryptedTensor<float64, shape=(1, 32, 64)>
        %15 = -4                               # ClearScalar<int3>
        %16 = 3                                # ClearScalar<uint2>
        %17 = clip(%14, %15, %16)              # EncryptedTensor<float64, shape=(1, 32, 64)>
        %18 = astype(%17, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %18

    %13 = subgraph(%11):

         %0 = input                          # EncryptedTensor<uint1, shape=(1, 64, 32)>
         %1 = 15.0                           # ClearScalar<float64>
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 64, 32)>
         %3 = 0.00013246862385861817         # ClearScalar<float64>
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 64, 32)>
         %5 = 0.0005866467628024519          # ClearScalar<float64>
         %6 = divide(%4, %5)                 # EncryptedTensor<float64, shape=(1, 64, 32)>
         %7 = -1                             # ClearScalar<int1>
         %8 = add(%6, %7)                    # EncryptedTensor<float64, shape=(1, 64, 32)>
         %9 = rint(%8)                       # EncryptedTensor<float64, shape=(1, 64, 32)>
        %10 = -4                             # ClearScalar<int3>
        %11 = 3                              # ClearScalar<uint2>
        %12 = clip(%9, %10, %11)             # EncryptedTensor<float64, shape=(1, 64, 32)>
        %13 = astype(%12, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 64, 32)>
        return %13

    %23 = subgraph(%21):

        %0 = input                            # EncryptedTensor<uint2, shape=(32, 64, 32)>          @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
        %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(32, 64, 32)>        @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
        %2 = 2                                # ClearScalar<uint2>                                  @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
        %3 = power(%1, %2)                    # EncryptedTensor<float64, shape=(32, 64, 32)>        @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
        %4 = 4.0                              # ClearScalar<float64>                                @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
        %5 = divide(%3, %4)                   # EncryptedTensor<float64, shape=(32, 64, 32)>        @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
        %6 = astype(%5, dtype=int_)           # EncryptedTensor<uint1, shape=(32, 64, 32)>          @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
        return %6

    %24 = subgraph(%22):

        %0 = input                            # EncryptedTensor<uint1, shape=(32, 64, 32)>          @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
        %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(32, 64, 32)>        @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
        %2 = 2                                # ClearScalar<uint2>                                  @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
        %3 = power(%1, %2)                    # EncryptedTensor<float64, shape=(32, 64, 32)>        @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
        %4 = 4.0                              # ClearScalar<float64>                                @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
        %5 = divide(%3, %4)                   # EncryptedTensor<float64, shape=(32, 64, 32)>        @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
        %6 = astype(%5, dtype=int_)           # EncryptedTensor<uint1, shape=(32, 64, 32)>          @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
        return %6

    %40 = subgraph(%39):

         %0 = input                          # EncryptedTensor<uint1, shape=(1, 32, 32)>
         %1 = 6.194245516315597e-07          # ClearScalar<float64>
         %2 = multiply(%1, %0)               # EncryptedTensor<float64, shape=(1, 32, 32)>
         %3 = 0.1                            # ClearScalar<float32>
         %4 = multiply(%2, %3)               # EncryptedTensor<float64, shape=(1, 32, 32)>
         %5 = multiply(%4, %4)               # EncryptedTensor<float64, shape=(1, 32, 32)>
         %6 = 1                              # ClearScalar<uint1>
         %7 = multiply(%6, %4)               # EncryptedTensor<float64, shape=(1, 32, 32)>
         %8 = add(%5, %7)                    # EncryptedTensor<float64, shape=(1, 32, 32)>
         %9 = 1.7686794953220794e-06         # ClearScalar<float64>
        %10 = divide(%8, %9)                 # EncryptedTensor<float64, shape=(1, 32, 32)>
        %11 = 0                              # ClearScalar<uint1>
        %12 = add(%10, %11)                  # EncryptedTensor<float64, shape=(1, 32, 32)>
        %13 = rint(%12)                      # EncryptedTensor<float64, shape=(1, 32, 32)>
        %14 = 0                              # ClearScalar<uint1>
        %15 = 7                              # ClearScalar<uint3>
        %16 = clip(%13, %14, %15)            # EncryptedTensor<float64, shape=(1, 32, 32)>
        %17 = astype(%16, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 32, 32)>
        return %17

    %41 = subgraph(%10):

         %0 = input                            # EncryptedTensor<uint7, shape=(1, 32, 64)>          @ /attn/value/MatMul.matmul
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 32, 64)>        @ /attn/value/MatMul.matmul_rounding
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 32, 64)>
         %4 = [[  55   4 ... -44    0]]        # ClearTensor<int9, shape=(1, 64)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %6 = 0.0001240843100257886            # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %8 = 0.008671837521916961             # ClearScalar<float64>
         %9 = divide(%7, %8)                   # EncryptedTensor<float64, shape=(1, 32, 64)>
        %10 = -1                               # ClearScalar<int1>
        %11 = add(%9, %10)                     # EncryptedTensor<float64, shape=(1, 32, 64)>
        %12 = rint(%11)                        # EncryptedTensor<float64, shape=(1, 32, 64)>
        %13 = -4                               # ClearScalar<int3>
        %14 = 3                                # ClearScalar<uint2>
        %15 = clip(%12, %13, %14)              # EncryptedTensor<float64, shape=(1, 32, 64)>
        %16 = astype(%15, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %16

    %51 = subgraph(%49):

        %0 = input                            # EncryptedTensor<uint2, shape=(32, 32, 64)>          @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
        %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(32, 32, 64)>        @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
        %2 = 2                                # ClearScalar<uint2>                                  @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
        %3 = power(%1, %2)                    # EncryptedTensor<float64, shape=(32, 32, 64)>        @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
        %4 = 4.0                              # ClearScalar<float64>                                @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
        %5 = divide(%3, %4)                   # EncryptedTensor<float64, shape=(32, 32, 64)>        @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
        %6 = astype(%5, dtype=int_)           # EncryptedTensor<uint1, shape=(32, 32, 64)>          @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
        return %6

    %52 = subgraph(%50):

        %0 = input                            # EncryptedTensor<uint1, shape=(32, 32, 64)>          @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
        %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(32, 32, 64)>        @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
        %2 = 2                                # ClearScalar<uint2>                                  @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
        %3 = power(%1, %2)                    # EncryptedTensor<float64, shape=(32, 32, 64)>        @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
        %4 = 4.0                              # ClearScalar<float64>                                @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
        %5 = divide(%3, %4)                   # EncryptedTensor<float64, shape=(32, 32, 64)>        @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
        %6 = astype(%5, dtype=int_)           # EncryptedTensor<uint1, shape=(32, 32, 64)>          @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
        return %6

    %68 = subgraph(%67):

         %0 = input                          # EncryptedTensor<uint1, shape=(1, 32, 64)>
         %1 = 1.5337701211779163e-08         # ClearScalar<float64>
         %2 = multiply(%1, %0)               # EncryptedTensor<float64, shape=(1, 32, 64)>
         %3 = 4.908064387769334e-07          # ClearScalar<float64>
         %4 = divide(%2, %3)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %5 = -1                             # ClearScalar<int1>
         %6 = add(%4, %5)                    # EncryptedTensor<float64, shape=(1, 32, 64)>
         %7 = rint(%6)                       # EncryptedTensor<float64, shape=(1, 32, 64)>
         %8 = -4                             # ClearScalar<int3>
         %9 = 3                              # ClearScalar<uint2>
        %10 = clip(%7, %8, %9)               # EncryptedTensor<float64, shape=(1, 32, 64)>
        %11 = astype(%10, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %11

    %71 = subgraph(%0):

         %0 = input                          # EncryptedTensor<uint1, shape=(1, 32, 64)>
         %1 = 0.0                            # ClearScalar<float64>
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 32, 64)>
         %3 = 0.009999999776482582           # ClearScalar<float64>
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 32, 64)>
         %5 = 0.009999999776482582           # ClearScalar<float64>
         %6 = divide(%4, %5)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %7 = 0                              # ClearScalar<uint1>
         %8 = add(%6, %7)                    # EncryptedTensor<float64, shape=(1, 32, 64)>
         %9 = rint(%8)                       # EncryptedTensor<float64, shape=(1, 32, 64)>
        %10 = 0                              # ClearScalar<uint1>
        %11 = 7                              # ClearScalar<uint3>
        %12 = clip(%9, %10, %11)             # EncryptedTensor<float64, shape=(1, 32, 64)>
        %13 = astype(%12, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %13

    %72 = subgraph(%70):

         %0 = input                            # EncryptedTensor<uint7, shape=(1, 32, 64)>          @ /attn/out_proj/MatMul.matmul
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 32, 64)>        @ /attn/out_proj/MatMul.matmul_rounding
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 32, 64)>
         %4 = [[  0   3  ...    8  -6]]        # ClearTensor<int6, shape=(1, 64)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %6 = 9.575454657287025e-08            # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %8 = 0.1                              # ClearScalar<float32>
         %9 = multiply(%7, %8)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
        %10 = 3.060346292698543e-07            # ClearScalar<float64>
        %11 = divide(%9, %10)                  # EncryptedTensor<float64, shape=(1, 32, 64)>
        %12 = -1                               # ClearScalar<int1>
        %13 = add(%11, %12)                    # EncryptedTensor<float64, shape=(1, 32, 64)>
        %14 = rint(%13)                        # EncryptedTensor<float64, shape=(1, 32, 64)>
        %15 = -4                               # ClearScalar<int3>
        %16 = 3                                # ClearScalar<uint2>
        %17 = clip(%14, %15, %16)              # EncryptedTensor<float64, shape=(1, 32, 64)>
        %18 = astype(%17, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %18

    %73 = subgraph(%71):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 32, 64)>
         %1 = 0.0                           # ClearScalar<float64>
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 32, 64)>
         %3 = 0.009999999776482582          # ClearScalar<float64>
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 32, 64)>
         %5 = 6.910459370611871e-08         # ClearScalar<float64>
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 32, 64)>
         %7 = 0                             # ClearScalar<uint1>
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 32, 64)>
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 32, 64)>
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %10

    %74 = subgraph(%72):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 32, 64)>
         %1 = -1.0                          # ClearScalar<float64>
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 32, 64)>
         %3 = 3.060346292698543e-07         # ClearScalar<float64>
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 32, 64)>
         %5 = 6.910459370611871e-08         # ClearScalar<float64>
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 32, 64)>
         %7 = 0                             # ClearScalar<uint1>
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 32, 64)>
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 32, 64)>
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %10

    %78 = subgraph(%77):

         %0 = input                            # EncryptedTensor<uint2, shape=(1, 32, 64)>
         %1 = 0.0                              # ClearScalar<float64>
         %2 = subtract(%0, %1)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %3 = 6.910459370611871e-08            # ClearScalar<float64>
         %4 = multiply(%3, %2)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %5 = [0.8839415 ... .9317965 ]        # ClearTensor<float32, shape=(64,)>
         %6 = multiply(%4, %5)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %7 = 0.00030781733725555177           # ClearScalar<float64>
         %8 = divide(%6, %7)                   # EncryptedTensor<float64, shape=(1, 32, 64)>
         %9 = -28                              # ClearScalar<int6>
        %10 = add(%8, %9)                      # EncryptedTensor<float64, shape=(1, 32, 64)>
        %11 = rint(%10)                        # EncryptedTensor<float64, shape=(1, 32, 64)>
        %12 = 0                                # ClearScalar<uint1>
        %13 = 7                                # ClearScalar<uint3>
        %14 = clip(%11, %12, %13)              # EncryptedTensor<float64, shape=(1, 32, 64)>
        %15 = astype(%14, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %15

    %81 = subgraph(%80):

         %0 = input                            # EncryptedTensor<uint7, shape=(1, 32, 128)>          @ /mlp/fc1/MatMul.matmul
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 32, 128)>        @ /mlp/fc1/MatMul.matmul_rounding
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 32, 128)>
         %4 = [[  84  -2 ...  28  112]]        # ClearTensor<int10, shape=(1, 128)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 32, 128)>
         %6 = 4.647185064598603e-05            # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 32, 128)>
         %8 = multiply(%7, %7)                 # EncryptedTensor<float64, shape=(1, 32, 128)>
         %9 = 1                                # ClearScalar<uint1>
        %10 = multiply(%9, %7)                 # EncryptedTensor<float64, shape=(1, 32, 128)>
        %11 = add(%8, %10)                     # EncryptedTensor<float64, shape=(1, 32, 128)>
        %12 = 0.0030882153622778627            # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 32, 128)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 32, 128)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 32, 128)>
        %17 = -4                               # ClearScalar<int3>
        %18 = 3                                # ClearScalar<uint2>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 32, 128)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 32, 128)>
        return %20

    %84 = subgraph(%77):

         %0 = input                          # EncryptedTensor<uint2, shape=(1, 32, 64)>
         %1 = 0.0                            # ClearScalar<float64>
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 32, 64)>
         %3 = 6.910459370611871e-08          # ClearScalar<float64>
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 32, 64)>
         %5 = 3.060346292699543e-07          # ClearScalar<float64>
         %6 = divide(%4, %5)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %7 = -32677                         # ClearScalar<int16>
         %8 = add(%6, %7)                    # EncryptedTensor<float64, shape=(1, 32, 64)>
         %9 = rint(%8)                       # EncryptedTensor<float64, shape=(1, 32, 64)>
        %10 = -4                             # ClearScalar<int3>
        %11 = 3                              # ClearScalar<uint2>
        %12 = clip(%9, %10, %11)             # EncryptedTensor<float64, shape=(1, 32, 64)>
        %13 = astype(%12, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %13

    %85 = subgraph(%83):

         %0 = input                            # EncryptedTensor<uint8, shape=(1, 32, 64)>          @ /mlp/fc2/MatMul.matmul
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 32, 64)>        @ /mlp/fc2/MatMul.matmul_rounding
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 32, 64)>
         %4 = [[0 0 0 0  ...  0 0 0 0]]        # ClearTensor<uint1, shape=(1, 64)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %6 = 0.0004794402593804288            # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %8 = 0.0058104964041856616            # ClearScalar<float64>
         %9 = divide(%7, %8)                   # EncryptedTensor<float64, shape=(1, 32, 64)>
        %10 = -1                               # ClearScalar<int1>
        %11 = add(%9, %10)                     # EncryptedTensor<float64, shape=(1, 32, 64)>
        %12 = rint(%11)                        # EncryptedTensor<float64, shape=(1, 32, 64)>
        %13 = -4                               # ClearScalar<int3>
        %14 = 3                                # ClearScalar<uint2>
        %15 = clip(%12, %13, %14)              # EncryptedTensor<float64, shape=(1, 32, 64)>
        %16 = astype(%15, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %16

    %86 = subgraph(%84):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 32, 64)>
         %1 = -32677.0                      # ClearScalar<float64>
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 32, 64)>
         %3 = 3.060346292699543e-07         # ClearScalar<float64>
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 32, 64)>
         %5 = 3.060346292699543e-07         # ClearScalar<float64>
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 32, 64)>
         %7 = 0                             # ClearScalar<uint1>
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 32, 64)>
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 32, 64)>
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %10

    %87 = subgraph(%85):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 32, 64)>
         %1 = -1.0                          # ClearScalar<float64>
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 32, 64)>
         %3 = 0.0058104964041856616         # ClearScalar<float64>
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 32, 64)>
         %5 = 3.060346292699543e-07         # ClearScalar<float64>
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 32, 64)>
         %7 = 0                             # ClearScalar<uint1>
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 32, 64)>
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 32, 64)>
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %10
