  %0 = _x                                         # EncryptedTensor<uint1, shape=(1, 32, 64)>
  %1 = 0.0                                        # ClearScalar<float64>
  %2 = subtract(%0, %1)                           # EncryptedTensor<float64, shape=(1, 32, 64)>
  %3 = 0.009999999776482582                       # ClearScalar<float64>
  %4 = multiply(%3, %2)                           # EncryptedTensor<float64, shape=(1, 32, 64)>
  %5 = [1.0138545 ... .9418791 ]                  # ClearTensor<float32, shape=(64,)>
  %6 = multiply(%4, %5)                           # EncryptedTensor<float64, shape=(1, 32, 64)>
  %7 = 0.0007430602397237505                      # ClearScalar<float64>
  %8 = divide(%6, %7)                             # EncryptedTensor<float64, shape=(1, 32, 64)>
  %9 = -11                                        # ClearScalar<int5>
 %10 = add(%8, %9)                                # EncryptedTensor<float64, shape=(1, 32, 64)>
 %11 = rint(%10)                                  # EncryptedTensor<float64, shape=(1, 32, 64)>
 %12 = 0                                          # ClearScalar<uint1>
 %13 = 7                                          # ClearScalar<uint3>
 %14 = clip(%11, %12, %13)                        # EncryptedTensor<float64, shape=(1, 32, 64)>
 %15 = astype(%14, dtype=int_)                    # EncryptedTensor<uint1, shape=(1, 32, 64)>
 %16 = [[-1 -1  0 ...  0  0  0]]                  # ClearTensor<int3, shape=(64, 64)>                           @ /attn/query/MatMul.matmul
 %17 = matmul(%15, %16)                           # EncryptedTensor<uint7, shape=(1, 32, 64)>                   @ /attn/query/MatMul.matmul
 %18 = astype(%17, dtype=float64)                 # EncryptedTensor<float64, shape=(1, 32, 64)>                 @ /attn/query/MatMul.matmul_rounding
 %19 = 0                                          # ClearScalar<uint1>
 %20 = add(%18, %19)                              # EncryptedTensor<float64, shape=(1, 32, 64)>
 %21 = [[  77   2 ... -33    0]]                  # ClearTensor<int9, shape=(1, 64)>
 %22 = subtract(%20, %21)                         # EncryptedTensor<float64, shape=(1, 32, 64)>
 %23 = 0.00026963481380951987                     # ClearScalar<float64>
 %24 = multiply(%23, %22)                         # EncryptedTensor<float64, shape=(1, 32, 64)>
 %25 = 0.1                                        # ClearScalar<float32>
 %26 = multiply(%24, %25)                         # EncryptedTensor<float64, shape=(1, 32, 64)>
 %27 = 0.0007430602397237505                      # ClearScalar<float64>
 %28 = divide(%6, %27)                            # EncryptedTensor<float64, shape=(1, 32, 64)>
 %29 = -11                                        # ClearScalar<int5>
 %30 = add(%28, %29)                              # EncryptedTensor<float64, shape=(1, 32, 64)>
 %31 = rint(%30)                                  # EncryptedTensor<float64, shape=(1, 32, 64)>
 %32 = 0                                          # ClearScalar<uint1>
 %33 = 7                                          # ClearScalar<uint3>
 %34 = clip(%31, %32, %33)                        # EncryptedTensor<float64, shape=(1, 32, 64)>
 %35 = astype(%34, dtype=int_)                    # EncryptedTensor<uint1, shape=(1, 32, 64)>
 %36 = [[0 0 0 .. ... .. 0 0 0]]                  # ClearTensor<int3, shape=(64, 64)>                           @ /attn/key/MatMul.matmul
 %37 = matmul(%35, %36)                           # EncryptedTensor<uint7, shape=(1, 32, 64)>                   @ /attn/key/MatMul.matmul
 %38 = astype(%37, dtype=float64)                 # EncryptedTensor<float64, shape=(1, 32, 64)>                 @ /attn/key/MatMul.matmul_rounding
 %39 = 0                                          # ClearScalar<uint1>
 %40 = add(%38, %39)                              # EncryptedTensor<float64, shape=(1, 32, 64)>
 %41 = [[ 22  22  ...    0  66]]                  # ClearTensor<int8, shape=(1, 64)>
 %42 = subtract(%40, %41)                         # EncryptedTensor<float64, shape=(1, 32, 64)>
 %43 = 0.00023345456028376447                     # ClearScalar<float64>
 %44 = multiply(%43, %42)                         # EncryptedTensor<float64, shape=(1, 32, 64)>
 %45 = 0.1                                        # ClearScalar<float32>
 %46 = multiply(%44, %45)                         # EncryptedTensor<float64, shape=(1, 32, 64)>
 %47 = 0.00013246862385861817                     # ClearScalar<float64>
 %48 = divide(%46, %47)                           # EncryptedTensor<float64, shape=(1, 32, 64)>
 %49 = 15                                         # ClearScalar<uint4>
 %50 = add(%48, %49)                              # EncryptedTensor<float64, shape=(1, 32, 64)>
 %51 = rint(%50)                                  # EncryptedTensor<float64, shape=(1, 32, 64)>
 %52 = 0                                          # ClearScalar<uint1>
 %53 = 31                                         # ClearScalar<uint5>
 %54 = clip(%51, %52, %53)                        # EncryptedTensor<float64, shape=(1, 32, 64)>
 %55 = astype(%54, dtype=int_)                    # EncryptedTensor<uint1, shape=(1, 32, 64)>
 %56 = 0.0007430602397237505                      # ClearScalar<float64>
 %57 = divide(%6, %56)                            # EncryptedTensor<float64, shape=(1, 32, 64)>
 %58 = -11                                        # ClearScalar<int5>
 %59 = add(%57, %58)                              # EncryptedTensor<float64, shape=(1, 32, 64)>
 %60 = rint(%59)                                  # EncryptedTensor<float64, shape=(1, 32, 64)>
 %61 = 0                                          # ClearScalar<uint1>
 %62 = 7                                          # ClearScalar<uint3>
 %63 = clip(%60, %61, %62)                        # EncryptedTensor<float64, shape=(1, 32, 64)>
 %64 = astype(%63, dtype=int_)                    # EncryptedTensor<uint1, shape=(1, 32, 64)>
 %65 = [[ 0  0  0 ...  0  0  0]]                  # ClearTensor<int3, shape=(64, 64)>                           @ /attn/value/MatMul.matmul
 %66 = matmul(%64, %65)                           # EncryptedTensor<uint7, shape=(1, 32, 64)>                   @ /attn/value/MatMul.matmul
 %67 = astype(%66, dtype=float64)                 # EncryptedTensor<float64, shape=(1, 32, 64)>                 @ /attn/value/MatMul.matmul_rounding
 %68 = 0                                          # ClearScalar<uint1>
 %69 = add(%67, %68)                              # EncryptedTensor<float64, shape=(1, 32, 64)>
 %70 = [[  55   4 ... -44    0]]                  # ClearTensor<int9, shape=(1, 64)>
 %71 = subtract(%69, %70)                         # EncryptedTensor<float64, shape=(1, 32, 64)>
 %72 = 0.0001240843100257886                      # ClearScalar<float64>
 %73 = multiply(%72, %71)                         # EncryptedTensor<float64, shape=(1, 32, 64)>
 %74 = transpose(%55, axes=(0, 2, 1))             # EncryptedTensor<uint1, shape=(1, 64, 32)>
 %75 = 15.0                                       # ClearScalar<float64>
 %76 = subtract(%74, %75)                         # EncryptedTensor<float64, shape=(1, 64, 32)>
 %77 = 0.00013246862385861817                     # ClearScalar<float64>
 %78 = multiply(%77, %76)                         # EncryptedTensor<float64, shape=(1, 64, 32)>
 %79 = 0.0010558731265685778                      # ClearScalar<float64>
 %80 = divide(%26, %79)                           # EncryptedTensor<float64, shape=(1, 32, 64)>
 %81 = 0                                          # ClearScalar<uint1>
 %82 = add(%80, %81)                              # EncryptedTensor<float64, shape=(1, 32, 64)>
 %83 = rint(%82)                                  # EncryptedTensor<float64, shape=(1, 32, 64)>
 %84 = -4                                         # ClearScalar<int3>
 %85 = 3                                          # ClearScalar<uint2>
 %86 = clip(%83, %84, %85)                        # EncryptedTensor<float64, shape=(1, 32, 64)>
 %87 = astype(%86, dtype=int_)                    # EncryptedTensor<uint1, shape=(1, 32, 64)>
 %88 = 0.0005866467628024519                      # ClearScalar<float64>
 %89 = divide(%78, %88)                           # EncryptedTensor<float64, shape=(1, 64, 32)>
 %90 = -1                                         # ClearScalar<int1>
 %91 = add(%89, %90)                              # EncryptedTensor<float64, shape=(1, 64, 32)>
 %92 = rint(%91)                                  # EncryptedTensor<float64, shape=(1, 64, 32)>
 %93 = -4                                         # ClearScalar<int3>
 %94 = 3                                          # ClearScalar<uint2>
 %95 = clip(%92, %93, %94)                        # EncryptedTensor<float64, shape=(1, 64, 32)>
 %96 = astype(%95, dtype=int_)                    # EncryptedTensor<uint1, shape=(1, 64, 32)>
 %97 = copy_function(%87)                         # EncryptedTensor<uint1, shape=(1, 32, 64)>
 %98 = copy_function(%96)                         # EncryptedTensor<uint1, shape=(1, 64, 32)>
 %99 = zeros()                                    # EncryptedTensor<uint1, shape=(1, 32, 32)>                   @ /attn/MatMul.matmul.encrypted_matmul
%100 = %97[0]                                     # EncryptedTensor<uint1, shape=(32, 64)>                      @ /attn/MatMul.matmul.encrypted_matmul
%101 = %98[0]                                     # EncryptedTensor<uint1, shape=(64, 32)>                      @ /attn/MatMul.matmul.encrypted_matmul
%102 = reshape(%100, newshape=(32, 64, 1))        # EncryptedTensor<uint1, shape=(32, 64, 1)>                   @ /attn/MatMul.matmul.encrypted_matmul
%103 = reshape(%101, newshape=(1, 64, 32))        # EncryptedTensor<uint1, shape=(1, 64, 32)>                   @ /attn/MatMul.matmul.encrypted_matmul
%104 = add(%102, %103)                            # EncryptedTensor<uint2, shape=(32, 64, 32)>                  @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
%105 = subtract(%102, %103)                       # EncryptedTensor<uint1, shape=(32, 64, 32)>                  @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
%106 = astype(%104, dtype=float64)                # EncryptedTensor<float64, shape=(32, 64, 32)>                @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
%107 = 2                                          # ClearScalar<uint2>                                          @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
%108 = power(%106, %107)                          # EncryptedTensor<float64, shape=(32, 64, 32)>                @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
%109 = astype(%105, dtype=float64)                # EncryptedTensor<float64, shape=(32, 64, 32)>                @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
%110 = 2                                          # ClearScalar<uint2>                                          @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
%111 = power(%109, %110)                          # EncryptedTensor<float64, shape=(32, 64, 32)>                @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
%112 = 4.0                                        # ClearScalar<float64>                                        @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
%113 = divide(%108, %112)                         # EncryptedTensor<float64, shape=(32, 64, 32)>                @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
%114 = astype(%113, dtype=int_)                   # EncryptedTensor<uint1, shape=(32, 64, 32)>                  @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
%115 = 4.0                                        # ClearScalar<float64>                                        @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
%116 = divide(%111, %115)                         # EncryptedTensor<float64, shape=(32, 64, 32)>                @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
%117 = astype(%116, dtype=int_)                   # EncryptedTensor<uint1, shape=(32, 64, 32)>                  @ /attn/MatMul.matmul.encrypted_matmul.pbs_multiplication
%118 = subtract(%114, %117)                       # EncryptedTensor<uint1, shape=(32, 64, 32)>                  @ /attn/MatMul.matmul.encrypted_matmul
%119 = sum(%118, axis=1)                          # EncryptedTensor<uint7, shape=(32, 32)>                      @ /attn/MatMul.matmul.encrypted_matmul
%120 = (%99[0] = %119)                            # EncryptedTensor<uint1, shape=(1, 32, 32)>                   @ /attn/MatMul.matmul.encrypted_matmul
%121 = copy_function(%87)                         # EncryptedTensor<uint1, shape=(1, 32, 64)>
%122 = sum(%121, axis=-1, keepdims=True)          # EncryptedTensor<uint7, shape=(1, 32, 1)>                    @ /attn/MatMul.matmul_inputsum
%123 = 1                                          # ClearScalar<uint1>                                          @ /attn/MatMul.matmul_inputsum
%124 = multiply(%123, %122)                       # EncryptedTensor<uint1, shape=(1, 32, 1)>                    @ /attn/MatMul.matmul_inputsum
%125 = add(%120, %124)                            # EncryptedTensor<uint2, shape=(1, 32, 32)>                   @ /attn/MatMul.matmul_add_inputsum
%126 = copy_function(%96)                         # EncryptedTensor<uint1, shape=(1, 64, 32)>
%127 = sum(%126, axis=-2, keepdims=True)          # EncryptedTensor<uint7, shape=(1, 1, 32)>                    @ /attn/MatMul.sum_weights_times_zero_point
%128 = 0                                          # ClearScalar<uint1>                                          @ /attn/MatMul.sum_weights_times_zero_point
%129 = multiply(%128, %127)                       # EncryptedTensor<uint1, shape=(1, 1, 32)>                    @ /attn/MatMul.sum_weights_times_zero_point
%130 = 0                                          # ClearScalar<uint1>
%131 = add(%125, %130)                            # EncryptedTensor<uint2, shape=(1, 32, 32)>
%132 = subtract(%131, %129)                       # EncryptedTensor<uint1, shape=(1, 32, 32)>
%133 = 6.194245516315597e-07                      # ClearScalar<float64>
%134 = multiply(%133, %132)                       # EncryptedTensor<float64, shape=(1, 32, 32)>
%135 = 0.1                                        # ClearScalar<float32>
%136 = multiply(%134, %135)                       # EncryptedTensor<float64, shape=(1, 32, 32)>
%137 = multiply(%136, %136)                       # EncryptedTensor<float64, shape=(1, 32, 32)>
%138 = 1                                          # ClearScalar<uint1>
%139 = multiply(%138, %136)                       # EncryptedTensor<float64, shape=(1, 32, 32)>
%140 = add(%137, %139)                            # EncryptedTensor<float64, shape=(1, 32, 32)>
%141 = 1.7686794953220794e-06                     # ClearScalar<float64>
%142 = divide(%140, %141)                         # EncryptedTensor<float64, shape=(1, 32, 32)>
%143 = 0                                          # ClearScalar<uint1>
%144 = add(%142, %143)                            # EncryptedTensor<float64, shape=(1, 32, 32)>
%145 = rint(%144)                                 # EncryptedTensor<float64, shape=(1, 32, 32)>
%146 = 0                                          # ClearScalar<uint1>
%147 = 7                                          # ClearScalar<uint3>
%148 = clip(%145, %146, %147)                     # EncryptedTensor<float64, shape=(1, 32, 32)>
%149 = astype(%148, dtype=int_)                   # EncryptedTensor<uint1, shape=(1, 32, 32)>
%150 = 0.008671837521916961                       # ClearScalar<float64>
%151 = divide(%73, %150)                          # EncryptedTensor<float64, shape=(1, 32, 64)>
%152 = -1                                         # ClearScalar<int1>
%153 = add(%151, %152)                            # EncryptedTensor<float64, shape=(1, 32, 64)>
%154 = rint(%153)                                 # EncryptedTensor<float64, shape=(1, 32, 64)>
%155 = -4                                         # ClearScalar<int3>
%156 = 3                                          # ClearScalar<uint2>
%157 = clip(%154, %155, %156)                     # EncryptedTensor<float64, shape=(1, 32, 64)>
%158 = astype(%157, dtype=int_)                   # EncryptedTensor<uint1, shape=(1, 32, 64)>
%159 = copy_function(%149)                        # EncryptedTensor<uint1, shape=(1, 32, 32)>
%160 = copy_function(%158)                        # EncryptedTensor<uint1, shape=(1, 32, 64)>
%161 = zeros()                                    # EncryptedTensor<uint1, shape=(1, 32, 64)>                   @ /attn/MatMul_1.matmul.encrypted_matmul
%162 = %159[0]                                    # EncryptedTensor<uint1, shape=(32, 32)>                      @ /attn/MatMul_1.matmul.encrypted_matmul
%163 = %160[0]                                    # EncryptedTensor<uint1, shape=(32, 64)>                      @ /attn/MatMul_1.matmul.encrypted_matmul
%164 = reshape(%162, newshape=(32, 32, 1))        # EncryptedTensor<uint1, shape=(32, 32, 1)>                   @ /attn/MatMul_1.matmul.encrypted_matmul
%165 = reshape(%163, newshape=(1, 32, 64))        # EncryptedTensor<uint1, shape=(1, 32, 64)>                   @ /attn/MatMul_1.matmul.encrypted_matmul
%166 = add(%164, %165)                            # EncryptedTensor<uint2, shape=(32, 32, 64)>                  @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
%167 = subtract(%164, %165)                       # EncryptedTensor<uint1, shape=(32, 32, 64)>                  @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
%168 = astype(%166, dtype=float64)                # EncryptedTensor<float64, shape=(32, 32, 64)>                @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
%169 = 2                                          # ClearScalar<uint2>                                          @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
%170 = power(%168, %169)                          # EncryptedTensor<float64, shape=(32, 32, 64)>                @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
%171 = astype(%167, dtype=float64)                # EncryptedTensor<float64, shape=(32, 32, 64)>                @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
%172 = 2                                          # ClearScalar<uint2>                                          @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
%173 = power(%171, %172)                          # EncryptedTensor<float64, shape=(32, 32, 64)>                @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
%174 = 4.0                                        # ClearScalar<float64>                                        @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
%175 = divide(%170, %174)                         # EncryptedTensor<float64, shape=(32, 32, 64)>                @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
%176 = astype(%175, dtype=int_)                   # EncryptedTensor<uint1, shape=(32, 32, 64)>                  @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
%177 = 4.0                                        # ClearScalar<float64>                                        @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
%178 = divide(%173, %177)                         # EncryptedTensor<float64, shape=(32, 32, 64)>                @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
%179 = astype(%178, dtype=int_)                   # EncryptedTensor<uint1, shape=(32, 32, 64)>                  @ /attn/MatMul_1.matmul.encrypted_matmul.pbs_multiplication
%180 = subtract(%176, %179)                       # EncryptedTensor<uint1, shape=(32, 32, 64)>                  @ /attn/MatMul_1.matmul.encrypted_matmul
%181 = sum(%180, axis=1)                          # EncryptedTensor<uint6, shape=(32, 64)>                      @ /attn/MatMul_1.matmul.encrypted_matmul
%182 = (%161[0] = %181)                           # EncryptedTensor<uint1, shape=(1, 32, 64)>                   @ /attn/MatMul_1.matmul.encrypted_matmul
%183 = copy_function(%149)                        # EncryptedTensor<uint1, shape=(1, 32, 32)>
%184 = sum(%183, axis=-1, keepdims=True)          # EncryptedTensor<uint6, shape=(1, 32, 1)>                    @ /attn/MatMul_1.matmul_inputsum
%185 = 1                                          # ClearScalar<uint1>                                          @ /attn/MatMul_1.matmul_inputsum
%186 = multiply(%185, %184)                       # EncryptedTensor<uint1, shape=(1, 32, 1)>                    @ /attn/MatMul_1.matmul_inputsum
%187 = add(%182, %186)                            # EncryptedTensor<uint2, shape=(1, 32, 64)>                   @ /attn/MatMul_1.matmul_add_inputsum
%188 = copy_function(%158)                        # EncryptedTensor<uint1, shape=(1, 32, 64)>
%189 = sum(%188, axis=-2, keepdims=True)          # EncryptedTensor<uint6, shape=(1, 1, 64)>                    @ /attn/MatMul_1.sum_weights_times_zero_point
%190 = 0                                          # ClearScalar<uint1>                                          @ /attn/MatMul_1.sum_weights_times_zero_point
%191 = multiply(%190, %189)                       # EncryptedTensor<uint1, shape=(1, 1, 64)>                    @ /attn/MatMul_1.sum_weights_times_zero_point
%192 = 0                                          # ClearScalar<uint1>
%193 = add(%187, %192)                            # EncryptedTensor<uint2, shape=(1, 32, 64)>
%194 = subtract(%193, %191)                       # EncryptedTensor<uint1, shape=(1, 32, 64)>
%195 = 1.5337701211779163e-08                     # ClearScalar<float64>
%196 = multiply(%195, %194)                       # EncryptedTensor<float64, shape=(1, 32, 64)>
%197 = 4.908064387769334e-07                      # ClearScalar<float64>
%198 = divide(%196, %197)                         # EncryptedTensor<float64, shape=(1, 32, 64)>
%199 = -1                                         # ClearScalar<int1>
%200 = add(%198, %199)                            # EncryptedTensor<float64, shape=(1, 32, 64)>
%201 = rint(%200)                                 # EncryptedTensor<float64, shape=(1, 32, 64)>
%202 = -4                                         # ClearScalar<int3>
%203 = 3                                          # ClearScalar<uint2>
%204 = clip(%201, %202, %203)                     # EncryptedTensor<float64, shape=(1, 32, 64)>
%205 = astype(%204, dtype=int_)                   # EncryptedTensor<uint1, shape=(1, 32, 64)>
%206 = [[ 0  0  0 ... -1  0  1]]                  # ClearTensor<int3, shape=(64, 64)>                           @ /attn/out_proj/MatMul.matmul
%207 = matmul(%205, %206)                         # EncryptedTensor<uint7, shape=(1, 32, 64)>                   @ /attn/out_proj/MatMul.matmul
%208 = astype(%207, dtype=float64)                # EncryptedTensor<float64, shape=(1, 32, 64)>                 @ /attn/out_proj/MatMul.matmul_rounding
%209 = 0                                          # ClearScalar<uint1>
%210 = add(%208, %209)                            # EncryptedTensor<float64, shape=(1, 32, 64)>
%211 = [[  0   3  ...    8  -6]]                  # ClearTensor<int6, shape=(1, 64)>
%212 = subtract(%210, %211)                       # EncryptedTensor<float64, shape=(1, 32, 64)>
%213 = 9.575454657287025e-08                      # ClearScalar<float64>
%214 = multiply(%213, %212)                       # EncryptedTensor<float64, shape=(1, 32, 64)>
%215 = 0.1                                        # ClearScalar<float32>
%216 = multiply(%214, %215)                       # EncryptedTensor<float64, shape=(1, 32, 64)>
%217 = subgraph(%0)                               # EncryptedTensor<uint1, shape=(1, 32, 64)>
%218 = 3.060346292698543e-07                      # ClearScalar<float64>
%219 = divide(%216, %218)                         # EncryptedTensor<float64, shape=(1, 32, 64)>
%220 = -1                                         # ClearScalar<int1>
%221 = add(%219, %220)                            # EncryptedTensor<float64, shape=(1, 32, 64)>
%222 = rint(%221)                                 # EncryptedTensor<float64, shape=(1, 32, 64)>
%223 = -4                                         # ClearScalar<int3>
%224 = 3                                          # ClearScalar<uint2>
%225 = clip(%222, %223, %224)                     # EncryptedTensor<float64, shape=(1, 32, 64)>
%226 = astype(%225, dtype=int_)                   # EncryptedTensor<uint1, shape=(1, 32, 64)>
%227 = subgraph(%217)                             # EncryptedTensor<uint1, shape=(1, 32, 64)>
%228 = subgraph(%226)                             # EncryptedTensor<uint1, shape=(1, 32, 64)>
%229 = 1                                          # ClearScalar<uint1>
%230 = multiply(%229, %228)                       # EncryptedTensor<uint1, shape=(1, 32, 64)>
%231 = add(%227, %230)                            # EncryptedTensor<uint2, shape=(1, 32, 64)>
%232 = 0.0                                        # ClearScalar<float64>
%233 = subtract(%231, %232)                       # EncryptedTensor<float64, shape=(1, 32, 64)>
%234 = 6.910459370611871e-08                      # ClearScalar<float64>
%235 = multiply(%234, %233)                       # EncryptedTensor<float64, shape=(1, 32, 64)>
%236 = [0.8839415 ... .9317965 ]                  # ClearTensor<float32, shape=(64,)>
%237 = multiply(%235, %236)                       # EncryptedTensor<float64, shape=(1, 32, 64)>
%238 = 0.00030781733725555177                     # ClearScalar<float64>
%239 = divide(%237, %238)                         # EncryptedTensor<float64, shape=(1, 32, 64)>
%240 = -28                                        # ClearScalar<int6>
%241 = add(%239, %240)                            # EncryptedTensor<float64, shape=(1, 32, 64)>
%242 = rint(%241)                                 # EncryptedTensor<float64, shape=(1, 32, 64)>
%243 = 0                                          # ClearScalar<uint1>
%244 = 7                                          # ClearScalar<uint3>
%245 = clip(%242, %243, %244)                     # EncryptedTensor<float64, shape=(1, 32, 64)>
%246 = astype(%245, dtype=int_)                   # EncryptedTensor<uint1, shape=(1, 32, 64)>
%247 = [[ 0  0  0 ... -1 -1  0]]                  # ClearTensor<int3, shape=(64, 128)>                          @ /mlp/fc1/MatMul.matmul
%248 = matmul(%246, %247)                         # EncryptedTensor<uint7, shape=(1, 32, 128)>                  @ /mlp/fc1/MatMul.matmul
%249 = subgraph(%248)                             # EncryptedTensor<uint1, shape=(1, 32, 128)>
%250 = [[ 0  0  0 ...  0  0 -1]]                  # ClearTensor<int3, shape=(128, 64)>                          @ /mlp/fc2/MatMul.matmul
%251 = matmul(%249, %250)                         # EncryptedTensor<uint8, shape=(1, 32, 64)>                   @ /mlp/fc2/MatMul.matmul
%252 = subgraph(%231)                             # EncryptedTensor<uint1, shape=(1, 32, 64)>
%253 = subgraph(%251)                             # EncryptedTensor<uint1, shape=(1, 32, 64)>
%254 = subgraph(%252)                             # EncryptedTensor<uint1, shape=(1, 32, 64)>
%255 = subgraph(%253)                             # EncryptedTensor<uint1, shape=(1, 32, 64)>
%256 = 1                                          # ClearScalar<uint1>
%257 = multiply(%256, %255)                       # EncryptedTensor<uint1, shape=(1, 32, 64)>
%258 = add(%254, %257)                            # EncryptedTensor<uint2, shape=(1, 32, 64)>
return %258

Subgraphs:

    %217 = subgraph(%0):

         %0 = input                          # EncryptedTensor<uint1, shape=(1, 32, 64)>
         %1 = 0.0                            # ClearScalar<float64>
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 32, 64)>
         %3 = 0.009999999776482582           # ClearScalar<float64>
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 32, 64)>
         %5 = 0.009999999776482582           # ClearScalar<float64>
         %6 = divide(%4, %5)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %7 = 0                              # ClearScalar<uint1>
         %8 = add(%6, %7)                    # EncryptedTensor<float64, shape=(1, 32, 64)>
         %9 = rint(%8)                       # EncryptedTensor<float64, shape=(1, 32, 64)>
        %10 = 0                              # ClearScalar<uint1>
        %11 = 7                              # ClearScalar<uint3>
        %12 = clip(%9, %10, %11)             # EncryptedTensor<float64, shape=(1, 32, 64)>
        %13 = astype(%12, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %13

    %227 = subgraph(%217):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 32, 64)>
         %1 = 0.0                           # ClearScalar<float64>
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 32, 64)>
         %3 = 0.009999999776482582          # ClearScalar<float64>
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 32, 64)>
         %5 = 6.910459370611871e-08         # ClearScalar<float64>
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 32, 64)>
         %7 = 0                             # ClearScalar<uint1>
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 32, 64)>
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 32, 64)>
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %10

    %228 = subgraph(%226):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 32, 64)>
         %1 = -1.0                          # ClearScalar<float64>
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 32, 64)>
         %3 = 3.060346292698543e-07         # ClearScalar<float64>
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 32, 64)>
         %5 = 6.910459370611871e-08         # ClearScalar<float64>
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 32, 64)>
         %7 = 0                             # ClearScalar<uint1>
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 32, 64)>
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 32, 64)>
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %10

    %249 = subgraph(%248):

         %0 = input                            # EncryptedTensor<uint7, shape=(1, 32, 128)>          @ /mlp/fc1/MatMul.matmul
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 32, 128)>        @ /mlp/fc1/MatMul.matmul_rounding
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 32, 128)>
         %4 = [[  84  -2 ...  28  112]]        # ClearTensor<int10, shape=(1, 128)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 32, 128)>
         %6 = 4.647185064598603e-05            # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 32, 128)>
         %8 = multiply(%7, %7)                 # EncryptedTensor<float64, shape=(1, 32, 128)>
         %9 = 1                                # ClearScalar<uint1>
        %10 = multiply(%9, %7)                 # EncryptedTensor<float64, shape=(1, 32, 128)>
        %11 = add(%8, %10)                     # EncryptedTensor<float64, shape=(1, 32, 128)>
        %12 = 0.0030882153622778627            # ClearScalar<float64>
        %13 = divide(%11, %12)                 # EncryptedTensor<float64, shape=(1, 32, 128)>
        %14 = 0                                # ClearScalar<uint1>
        %15 = add(%13, %14)                    # EncryptedTensor<float64, shape=(1, 32, 128)>
        %16 = rint(%15)                        # EncryptedTensor<float64, shape=(1, 32, 128)>
        %17 = -4                               # ClearScalar<int3>
        %18 = 3                                # ClearScalar<uint2>
        %19 = clip(%16, %17, %18)              # EncryptedTensor<float64, shape=(1, 32, 128)>
        %20 = astype(%19, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 32, 128)>
        return %20

    %252 = subgraph(%231):

         %0 = input                          # EncryptedTensor<uint2, shape=(1, 32, 64)>
         %1 = 0.0                            # ClearScalar<float64>
         %2 = subtract(%0, %1)               # EncryptedTensor<float64, shape=(1, 32, 64)>
         %3 = 6.910459370611871e-08          # ClearScalar<float64>
         %4 = multiply(%3, %2)               # EncryptedTensor<float64, shape=(1, 32, 64)>
         %5 = 3.060346292699543e-07          # ClearScalar<float64>
         %6 = divide(%4, %5)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %7 = -32677                         # ClearScalar<int16>
         %8 = add(%6, %7)                    # EncryptedTensor<float64, shape=(1, 32, 64)>
         %9 = rint(%8)                       # EncryptedTensor<float64, shape=(1, 32, 64)>
        %10 = -4                             # ClearScalar<int3>
        %11 = 3                              # ClearScalar<uint2>
        %12 = clip(%9, %10, %11)             # EncryptedTensor<float64, shape=(1, 32, 64)>
        %13 = astype(%12, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %13

    %253 = subgraph(%251):

         %0 = input                            # EncryptedTensor<uint8, shape=(1, 32, 64)>          @ /mlp/fc2/MatMul.matmul
         %1 = astype(%0, dtype=float64)        # EncryptedTensor<float64, shape=(1, 32, 64)>        @ /mlp/fc2/MatMul.matmul_rounding
         %2 = 0                                # ClearScalar<uint1>
         %3 = add(%1, %2)                      # EncryptedTensor<float64, shape=(1, 32, 64)>
         %4 = [[0 0 0 0  ...  0 0 0 0]]        # ClearTensor<uint1, shape=(1, 64)>
         %5 = subtract(%3, %4)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %6 = 0.0004794402593804288            # ClearScalar<float64>
         %7 = multiply(%6, %5)                 # EncryptedTensor<float64, shape=(1, 32, 64)>
         %8 = 0.0058104964041856616            # ClearScalar<float64>
         %9 = divide(%7, %8)                   # EncryptedTensor<float64, shape=(1, 32, 64)>
        %10 = -1                               # ClearScalar<int1>
        %11 = add(%9, %10)                     # EncryptedTensor<float64, shape=(1, 32, 64)>
        %12 = rint(%11)                        # EncryptedTensor<float64, shape=(1, 32, 64)>
        %13 = -4                               # ClearScalar<int3>
        %14 = 3                                # ClearScalar<uint2>
        %15 = clip(%12, %13, %14)              # EncryptedTensor<float64, shape=(1, 32, 64)>
        %16 = astype(%15, dtype=int_)          # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %16

    %254 = subgraph(%252):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 32, 64)>
         %1 = -32677.0                      # ClearScalar<float64>
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 32, 64)>
         %3 = 3.060346292699543e-07         # ClearScalar<float64>
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 32, 64)>
         %5 = 3.060346292699543e-07         # ClearScalar<float64>
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 32, 64)>
         %7 = 0                             # ClearScalar<uint1>
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 32, 64)>
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 32, 64)>
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %10

    %255 = subgraph(%253):

         %0 = input                         # EncryptedTensor<uint1, shape=(1, 32, 64)>
         %1 = -1.0                          # ClearScalar<float64>
         %2 = subtract(%0, %1)              # EncryptedTensor<float64, shape=(1, 32, 64)>
         %3 = 0.0058104964041856616         # ClearScalar<float64>
         %4 = multiply(%3, %2)              # EncryptedTensor<float64, shape=(1, 32, 64)>
         %5 = 3.060346292699543e-07         # ClearScalar<float64>
         %6 = divide(%4, %5)                # EncryptedTensor<float64, shape=(1, 32, 64)>
         %7 = 0                             # ClearScalar<uint1>
         %8 = add(%6, %7)                   # EncryptedTensor<float64, shape=(1, 32, 64)>
         %9 = rint(%8)                      # EncryptedTensor<float64, shape=(1, 32, 64)>
        %10 = astype(%9, dtype=int_)        # EncryptedTensor<uint1, shape=(1, 32, 64)>
        return %10
